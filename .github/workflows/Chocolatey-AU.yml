name: Choco Auto Update

on:
  schedule:
    - cron:  '27 9 * * 3'
  workflow_dispatch:

defaults:
  run:
    shell: pwsh

jobs:
  update_choco_auto:
    name: update_${{ matrix.package }}
    runs-on: windows-latest

    permissions:
      contents: write

    strategy:
      max-parallel: 1
      matrix:
        package: [
          everything-development,
          windows-app-runtime16,
          windows-app-runtime17
        ]

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          ref: main

      - name: Install Chocolatey Automatic Package Updater Module
        run: Install-Module Chocolatey-AU -Force

      - name: Run ${{ matrix.package }} update script
        id: update
        run: |
          cd manifests\${{ matrix.package }}
          $UpdateOutput = .\update.ps1
          $NupkgPath = (($UpdateOutput.Result | Where-Object {$_ -like '*.nupkg''*'}) -split "'")[1]
          Write-Output "NupkgPath=$($NupkgPath)" >> $Env:GITHUB_OUTPUT
          $ChocoVer = choco search ${{ matrix.package }} --exact | Where-Object { $_ -match '^${{ matrix.package }}\s' } | ForEach-Object { ($_ -split '\s+')[1] }
          $UpdateStatus = if ($UpdateOutput.updated -or ([version]$ChocoVer -lt [version]$UpdateOutput.NuspecVersion)) {'Update Available'} else {'No Update'}
          Write-Output "UpdateStatus=$($UpdateStatus)" >> $Env:GITHUB_OUTPUT

      - name: Test ${{ matrix.package }} install
        run: Test-Package -Install -Nu ${{ steps.update.outputs.NupkgPath }}
        if: steps.update.outputs.UpdateStatus == 'Update Available'

      - name: Publish to Chocolatey community feed
        id: push
        run: |
          $Nupkg = '${{ steps.update.outputs.NupkgPath }}'
          $ApiKey = '${{ secrets.CHOCO_KEY }}'
          $ChocoServer = 'https://push.chocolatey.org/'
          $pr = choco push $Nupkg --source $ChocoServer --key $ApiKey
          $PushStatus = if ($pr -match '403') {'Failed'} else {'Pushed'}
          Write-Output "PushStatus=$($PushStatus)" >> $Env:GITHUB_OUTPUT
          echo $pr
          echo "date=$(Get-Date -Format yyyy-MM-dd)" >> $Env:GITHUB_OUTPUT
          exit 0
        if: steps.update.outputs.UpdateStatus == 'Update Available'

      - name: Commit Updates
        uses: stefanzweifel/git-auto-commit-action@v5.2.0
        with:
          commit_message: Updated - ${{ matrix.package }} ${{ steps.update.outputs.newversion }} ${{ steps.push.outputs.date }}
          file_pattern: '*.nuspec *.ps1'
          commit_user_name: My GitHub Actions Bot
          commit_user_email: my-github-actions-bot@example.org
          commit_author: Author <actions@github.com>
        if: steps.update.outputs.UpdateStatus == 'Update Available' && steps.push.outputs.PushStatus == 'Pushed'